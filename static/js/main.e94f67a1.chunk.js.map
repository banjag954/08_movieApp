{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","react_default","a","createElement","className","Movie_MoviePoster","poster","this","props","title","genres","map","genre","index","Movie_MovieGenres","key","lib_default","text","synopsis","maxLine","ellipsis","trimRight","basedOn","Component","MoviePoster","src","alt","MovieGenres","App","_callApi","fetch","then","movieApi","json","data","movies","catch","err","console","log","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_this","sent","setState","state","stop","_renderMovies","movie","src_Movie_0","id","title_english","medium_cover_image","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8OAMMA,0LAWE,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACE,EAAD,CAAaC,OAAQC,KAAKC,MAAMF,UAEpCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAKI,KAAKC,MAAMC,OAChBR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVG,KAAKC,MAAME,OAAOC,IAAI,SAACC,EAAOC,GAAR,OAAkBZ,EAAAC,EAAAC,cAACW,EAAD,CAAaF,MAAOA,EAAOG,IAAKF,OAE7EZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CACIe,KAAMV,KAAKC,MAAMU,SACjBC,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,sBA3BZC,cAqCdC,mLAOE,OACIvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBqB,IAAKlB,KAAKC,MAAMF,OAAQoB,IAAI,wBAR7CH,aAapBI,mLAOE,OACI1B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBG,KAAKC,MAAMI,cAR7BW,aAgEXvB,ICZA4B,6MA7CbC,SAAW,WACT,OAAOC,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKC,SACvBC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG5BG,gCAAa,SAAAC,IAAA,IAAAN,EAAA,OAAAO,EAAAxC,EAAAyC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKlB,WADf,OACLM,EADKS,EAAAI,KAEXD,EAAKE,SAAS,CACZd,OAASA,GACR,WACDG,QAAQC,IAAI,aAAcQ,EAAKG,MAAMf,UAL5B,wBAAAS,EAAAO,SAAAV,QAabS,MAAQ,KAERE,cAAgB,WAUd,OATeL,EAAKG,MAAMf,OAAOxB,IAAI,SAAC0C,EAAMxC,GAC1C,OAAOZ,EAAAC,EAAAC,cAACmD,EAAD,CACPvC,IAAKsC,EAAME,GACX9C,MAAO4C,EAAMG,cACblD,OAAQ+C,EAAMI,mBACd/C,OAAQ2C,EAAM3C,OACdQ,SAAYmC,EAAMnC,kGAhCpBoB,QAAQC,IAAI,0DAoBZhC,KAAKiC,8CAoBL,OADAF,QAAQC,IAAI,aAAchC,KAAK2C,MAAMf,QAEnClC,EAAAC,EAAAC,cAAA,OAAKC,UAAWG,KAAK2C,MAAMf,OAAS,MAAQ,gBACzC5B,KAAK2C,MAAMf,OAAS5B,KAAK6C,gBAAkB,kBAjDlC7B,aCzCEmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.e94f67a1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css';\nimport LinesEllipsis from 'react-lines-ellipsis'\nimport { directive } from '@babel/types';\n\nclass Movie extends Component{\n\n    static propTypes = {\n        title: PropTypes.string.isRequired,\n        poster: PropTypes.string.isRequired,\n        genres: PropTypes.array.isRequired,\n        synopsis: PropTypes.string.isRequired\n    }\n\n    render(){\n\n        return(\n            <div className=\"movieCard\">\n                <div className=\"movie__Columns\">\n                    <MoviePoster poster={this.props.poster}/>\n                </div>\n                <div className=\"movie__Columns\">\n                    <h1>{this.props.title}</h1>\n                    <div className=\"movie__Genres\">\n                        {this.props.genres.map((genre, index) => <MovieGenres genre={genre} key={index} />)}\n                    </div>\n                    <div className=\"movie__Synopsis\">\n                    <LinesEllipsis\n                        text={this.props.synopsis}\n                        maxLine='3'\n                        ellipsis='...'\n                        trimRight\n                        basedOn='letters'\n                        />\n                        {/* {this.props.synopsis} */}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass MoviePoster extends Component{\n\n    static propTypes = {\n        poster: PropTypes.string.isRequired\n    }\n\n    render(){\n        return(\n            <img className=\"movie__Poster\" src={this.props.poster} alt=\"Movie Poster\"/>\n        )\n    }\n}\n\nclass MovieGenres extends Component{\n\n    static propTypes = {\n        genre: PropTypes.string.isRequired\n    }\n\n    render(){\n        return(\n            <span className=\"movie__genre\">{this.props.genre}</span>\n        )\n    }\n}\n\n// function Movie({title, poster, genres, synopsis}){\n\n//     Movie.propTypes = {\n//         title : PropTypes.string.isRequired,\n//         poster : PropTypes.string.isRequired,\n//         genre: PropTypes.array.isRequired,\n//         synopsis: PropTypes.string.isRequired\n//     }\n\n//     return(\n//         <div className=\"movieCard\">\n//             <div className=\"movie__Columns\">\n//                 <MoviePoster poster={poster}/>\n//             </div>\n//             <div className=\"movie__Columns\">\n//                 <h1>{title}</h1>\n//                 <div className=\"movie__Genres\">\n//                     {genres.map((genre, index) => <MovieGenres genre={genre} key={index} />)}\n//                     {/* {genres} */}\n//                 </div>\n//                 <p className=\"movie__Synopsis\">\n//                     {synopsis}\n//                 </p>\n//             </div>\n//         </div>\n//     )\n// }\n\n// function MoviePoster({poster}){\n\n//     MoviePoster.propTypes = {\n//         poster : PropTypes.string.isRequired\n//     }\n\n//     return(\n//         <img src={poster} alt=\"Movie Poster\" />\n//     )\n// }\n\n// function MovieGenres({genre}){\n\n//     // MoviePoster.propTypes = {\n//     //     genre: PropTypes.string.isRequired\n//     // }\n\n//     return(\n//         <span className=\"movie__genre\">{genre}</span>\n//     )\n// }\n\n\nexport default Movie;","import React, {Component} from 'react';\nimport './App.css';\nimport Movie from './Movie';\n// import { async } from 'q';\n\n// const movieTitles = [\n//   \"Iron Man\",\n//   \"Captain America\",\n//   \"Thor\",\n//   \"Avengers\",\n//   \"Avengers : End Game\"\n// ]\n\n// const movieImages = [\n//   \"http://pds17.egloos.com/pds/201003/05/35/f0094235_4b907af3179b5.jpg\",\n//   \"http://thumbnail.egloos.net/700x0/http://pds20.egloos.com/pds/201107/28/17/a0008417_4e30ec1626680.jpg\",\n//   \"https://d1nz104zbf64va.cloudfront.net/dt/a/o/5-things-you-didn-t-know-about-thor.jpg\",\n//   \"https://terrigen-cdn-dev.marvel.com/content/prod/1x/theavengers_lob_crd_03.jpg\",\n//   \"http://www.tvgroove.com/wp-content/uploads/2019/03/endgame1.jpg\"\n// ]\n\n// const movies = [\n//   {\n//     title: \"Iron Man\",\n//     poster: \"http://pds17.egloos.com/pds/201003/05/35/f0094235_4b907af3179b5.jpg\"\n\n//   },\n//   {\n//     title: \"Captain America\",\n//     poster: \"http://thumbnail.egloos.net/700x0/http://pds20.egloos.com/pds/201107/28/17/a0008417_4e30ec1626680.jpg\"\n\n//   },\n//   {\n//     title: \"Thor\",\n//     poster: \"https://d1nz104zbf64va.cloudfront.net/dt/a/o/5-things-you-didn-t-know-about-thor.jpg\",\n\n//   },\n//   {\n//     title: \"Avengers\",\n//     poster: \"https://terrigen-cdn-dev.marvel.com/content/prod/1x/theavengers_lob_crd_03.jpg\"\n\n//   },\n//   {\n//     title: \"Avengers : End Game\",\n//     poster: \"http://www.tvgroove.com/wp-content/uploads/2019/03/endgame1.jpg\"\n\n//   }\n// ]\n\n// 1. movies 같은 Array Data Variables를 만든다.\n// 2. ArrDataVar.map(함수 => { CallBack 변경 함수 입력})\n// 3. index로 Parameter로 설정 후 , Argument 지정\n\nclass App extends Component{\n\n  // Render : componentWillMount -> render() -> componentDidMount()\n\n  // Update componentWillReceveProps() -> (shouldComponontUpdate() == 이전 파일과 같음[true]) ? (바로 render함 ) : (!틀림 : componentWillUpdate()로 넘어감)  -> componentWillUpdate() -> render() -> com\n\n  componentWillMount(){\n    console.log('will mount');\n  }\n\n  _callApi = () => {\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=download_count')\n    .then(movieApi => movieApi.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies : movies\n    }, () => {\n      console.log('collllllll', this.state.movies)\n    })\n  }\n\n  componentDidMount(){\n    this._getMovies();\n  }\n\n  state = {}\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie,index) => {\n      return <Movie\n      key={movie.id}\n      title={movie.title_english}\n      poster={movie.medium_cover_image}\n      genres={movie.genres}\n      synopsis = {movie.synopsis}\n      />\n    })\n    return movies\n  }\n\n  render() {\n    console.log('did render', this.state.movies);\n    return (\n      <div className={this.state.movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : 'Loading' }\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n    // setTimeout(() => {\n    //   this.setState({\n\n    //     movies : [\n    //       {\n    //         title: \"Iron Man\",\n    //         poster: \"http://pds17.egloos.com/pds/201003/05/35/f0094235_4b907af3179b5.jpg\"\n        \n    //       },\n    //       {\n    //         title: \"Captain America\",\n    //         poster: \"http://thumbnail.egloos.net/700x0/http://pds20.egloos.com/pds/201107/28/17/a0008417_4e30ec1626680.jpg\"\n        \n    //       },\n    //       {\n    //         title: \"Thor\",\n    //         poster: \"https://d1nz104zbf64va.cloudfront.net/dt/a/o/5-things-you-didn-t-know-about-thor.jpg\",\n        \n    //       },\n    //       {\n    //         title: \"Avengers\",\n    //         poster: \"https://terrigen-cdn-dev.marvel.com/content/prod/1x/theavengers_lob_crd_03.jpg\"\n        \n    //       },\n    //       {\n    //         title: \"Avengers : End Game\",\n    //         poster: \"http://www.tvgroove.com/wp-content/uploads/2019/03/endgame1.jpg\"\n        \n    //       },\n    //       {\n    //         title:\"Far from home\",\n    //         poster:\"https://wegotthiscovered.com/wp-content/uploads/2019/05/spider-man-chinese-poster.jpg\"\n    //       },\n    //     ]\n    //   })\n    // }, 5000);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}